<div class="game-sokoban">
	<div class="game-select">
    	<label for="selectNiveau">Sélection du niveau</label>
        <div class="select">
    		<select id="selectNiveau">
    			<?php foreach($datas as $niveau): ?>
            	<option value="<?php echo $niveau; ?>">Niveau <?php echo $niveau; ?></option>
    			<?php endforeach; ?>
    		</select>
    	</div>
    	<div class="reload">
    		<a href="#" title="Recharger">
    			<i class="material-icons">autorenew</i>
    		</a>
    	</div>
    	<div class="undo">
    		<a href="#" title="Annuler">
    			<i class="material-icons">&#xE166;</i>
    		</a>
    	</div>
    </div>
    <br />
    <br />
    <br />
    <table class="indique">
    	<tbody>
    		<tr>
    			<td>Poussées : <span class="nbPush">0</span></td>
    			<td>Mouvements : <span class="nbMove">0</span></td>
    		</tr>
    	</tbody>
    </table>
	<div class="soko">
	</div>
	<div class="highscore">
		<div>
    		<h2>Meilleurs scores</h2>
        	<table class="table">
        		<thead>
        			<tr>
        				<th>Joueur</th>
        				<th>Nombre de poussées</th>
        				<th>Nombre de mouvement</th>
        				<th>le</th>
        			</tr>
        		</thead>
        		<tbody>
        		</tbody>
        	</table>
        </div>
	</div>
</div>
<script>
	var canPlay = false;
	var soko;
	
	$("#selectNiveau").change(function() {
		loadNiveau($(this).val());
		$(this).blur();
	});

	$(".game-select .reload a").click(function(e) {
		e.preventDefault();

		loadNiveau(soko.niveau);
		$("#selectNiveau").blur();
	});

	$(".game-select .undo a").click(function(e) {
		e.preventDefault();

		soko.undo();
	});
	
	function loadNiveau(niveau) {
		$.ajax({
			url: "<?php echo Home_Ajax_Game_Sokoban_Controller_Index::getUrl("index", "getNiveau"); ?>",
			type: 'POST',
			data: { niveau: niveau },
			dataType: 'JSON',
			success: function(data) {						
				soko.init(data, niveau);
				$(".highscore tbody").html(data["scores"]);
				$(".indique tbody td span").html("0");
				canPlay = true;
			},
			beforeSend: function() {
				$('#loading').show();
			},
			complete: function() {
				$('#loading').hide();
			}
		});
	}
	
	$(document).ready(function() {
		soko = new Soko($(".soko"));
		loadNiveau(1);
	});
	
	$(document).keydown(function(event) {
		if(canPlay) {
			event.preventDefault();
			if(event.which == 37) { //gauche
				if(soko.canPushGauche()) {
					soko.pushGauche();
				}
			
				if(soko.canGoGauche()) {
					soko.gauche();
				}
			}else if(event.which == 38) { //haut
				if(soko.canPushHaut()) {
					soko.pushHaut();
				}
			
				if(soko.canGoHaut()) {
					soko.haut();
				}
			}else if(event.which == 39) { //droite
				if(soko.canPushDroite()) {
					soko.pushDroite();
				}
			
				if(soko.canGoDroite()) {
					soko.droite();
				}
			}else if(event.which == 40) { //bas
				if(soko.canPushBas()) {
					soko.pushBas();
				}
			
				if(soko.canGoBas()) {
					soko.bas();
				}
			}
		}
	});

	$(".soko").mousedown(function(e) {
		var offset = $(this).offset(); 
		var x = Math.floor((e.pageX - offset.left) / 32);
		var y = Math.floor((e.pageY - offset.top) / 32);
		var chemin = soko.astar(x, y);

		soko.anim(0, chemin);
	});
	
	function Soko(container) {
		this.container = container;
	}
	
	Soko.prototype.init = function(data, niveau) {
		var x, y;
		var body = "";
		
		this.nbDestination = 0;
		this.niveau = niveau;
		this.nbMove = 0;
		this.nbPush = 0;
		this.backup = [];

		for(y=0;y<data["nbRow"];y++) {
			body += "<div class='row'>";
			for(x=0;x<data["nbCol"];x++) {
				var clazz = "";
				var car = data["data"][y][x];
				if(car == "#") {
					clazz = "mur";
				} else if(car == "$") {
					clazz = "caisse";
				} else if(car == ".") {
					clazz = "destination";
					this.nbDestination++;
				} else if(car == "*") {
					clazz = "caisse destination";
					this.nbDestination++;
				} else if(car == "@") {
					clazz = "joueur";
					this.joueur = {x: x, y: y};
				} else if(car == "+") {
					clazz = "joueur destination";
					this.joueur = {x: x, y: y};
				}
			
				body += "<div id='cell-"+x+"-"+y+"' class='cell "+clazz+"' data-x="+x+" data-y="+y+"></div>";
			}
			body += "</div>";
		}
		
		this.container.html(body);
	}
	
	Soko.prototype.canGoGauche = function() {
		return this.canGo(this.getCell(this.joueur["x"]-1, this.joueur["y"]));
	}
	
	Soko.prototype.canGoHaut = function() {
		return this.canGo(this.getCell(this.joueur["x"], this.joueur["y"]-1));
	}
	
	Soko.prototype.canGoDroite = function() {
		return this.canGo(this.getCell(this.joueur["x"]+1, this.joueur["y"]));
	}
	
	Soko.prototype.canGoBas = function() {
		return this.canGo(this.getCell(this.joueur["x"], this.joueur["y"]+1));
	}
	
	Soko.prototype.canPushGauche = function() {
		var gauche = this.getCell(this.joueur["x"]-1, this.joueur["y"]);
		var gauche1 = this.getCell(this.joueur["x"]-2, this.joueur["y"]);
		
		return this.hasCaisse(gauche) && this.canGo(gauche1);
	}
	
	Soko.prototype.canPushHaut = function() {
		var haut = this.getCell(this.joueur["x"], this.joueur["y"]-1);
		var haut1 = this.getCell(this.joueur["x"], this.joueur["y"]-2);
		
		return this.hasCaisse(haut) && this.canGo(haut1);
	}
	
	Soko.prototype.canPushDroite = function() {
		var droite = this.getCell(this.joueur["x"]+1, this.joueur["y"]);
		var droite1 = this.getCell(this.joueur["x"]+2, this.joueur["y"]);
		
		return this.hasCaisse(droite) && this.canGo(droite1);
	}
	
	Soko.prototype.canPushBas = function() {
		var bas = this.getCell(this.joueur["x"], this.joueur["y"]+1);
		var bas1 = this.getCell(this.joueur["x"], this.joueur["y"]+2);
		
		return this.hasCaisse(bas) && this.canGo(bas1);
	}
	
	Soko.prototype.gauche = function() {
		this.move(-1, 0, "gauche");
	}
	
	Soko.prototype.haut = function() {
		this.move(0, -1, "");
	}
	
	Soko.prototype.droite = function() {
		this.move(1, 0, "droite");
	}
	
	Soko.prototype.bas = function() {
		this.move(0, 1, "");
	}
	
	Soko.prototype.pushGauche = function() {
		this.push(this.getCell(this.joueur["x"]-1, this.joueur["y"]), this.getCell(this.joueur["x"]-2, this.joueur["y"]));
	}
	
	Soko.prototype.pushHaut = function() {
		this.push(this.getCell(this.joueur["x"], this.joueur["y"]-1), this.getCell(this.joueur["x"], this.joueur["y"]-2));
	}
	
	Soko.prototype.pushDroite = function() {
		this.push(this.getCell(this.joueur["x"]+1, this.joueur["y"]), this.getCell(this.joueur["x"]+2, this.joueur["y"]));
	}
	
	Soko.prototype.pushBas = function() {
		this.push(this.getCell(this.joueur["x"], this.joueur["y"]+1), this.getCell(this.joueur["x"], this.joueur["y"]+2));
	}
	
	Soko.prototype.resetJoueur = function() {
		this.getCell(this.joueur["x"], this.joueur["y"]).removeClass("joueur gauche droite");
	}

	Soko.prototype.move = function(incx, incy, clazz) {
		this.backup.unshift({
			type: "move",
			clazz: this.getCell(this.joueur["x"], this.joueur["y"]).attr("class"),
			move: {
				from: {
					x: this.joueur["x"],
					y: this.joueur["y"]
				}
			} 
		});
		this.resetJoueur();
		
		this.joueur["x"]+=incx;
		this.joueur["y"]+=incy;

		this.nbMove++;
		$(".indique .nbMove").html(this.nbMove);
		
		this.getCell(this.joueur["x"], this.joueur["y"]).addClass("joueur "+clazz);
	}
	
	Soko.prototype.push = function(cellSrc, cellDst) {
		var nbCaisseOk = 0;
		
		this.backup.unshift({
			type: "push",
			move: {
				from: {
					x: cellSrc.attr("data-x"),
					y: cellSrc.attr("data-y")
				},
				to: {
					x: cellDst.attr("data-x"),
					y: cellDst.attr("data-y")
				}
			}
		});
		
		cellSrc.removeClass("caisse");
		cellDst.addClass("caisse");

		nbCaisseOk = $(".cell.destination.caisse").length;
		
		this.nbPush++;
		$(".indique .nbPush").html(this.nbPush);
		
		if(nbCaisseOk == this.nbDestination) {
			var that = this;
			canPlay = false;
			
			setTimeout(function() { 
				alert("Niveau réussi bravo !");

				<?php if(Home_Modele_Index::isLoggedIn()): ?>
				 $.ajax({
						url: "<?php echo Home_Ajax_Game_Sokoban_Controller_Index::getUrl("index", "setScore"); ?>",
						type: 'POST',
						data: { niveau: that.niveau, nbMove: that.nbMove, nbPush: that.nbPush },
						success: function(data) {
							$(".highscore tbody").html(data);
						},
						beforeSend: function() {
							$('#loading').show();
						},
						complete: function() {
							$('#loading').hide();
						}
					});
				 <?php endif; ?>
			}, 500);
		}
	}
	
	Soko.prototype.getCell = function(x, y) {
		return $("#cell-"+x+"-"+y)
	}
	
	Soko.prototype.isMur = function(cell) {
		return cell.hasClass("mur");
	}
	
	Soko.prototype.isDestination = function(cell) {
		return cell.hasClass("destination");
	}
	
	Soko.prototype.hasCaisse = function(cell) {
		return cell.hasClass("caisse");
	}
	
	Soko.prototype.canGo = function(cell) {
		return !this.isMur(cell) && !this.hasCaisse(cell);
	}

	Soko.prototype.undo = function() {
		var backup = this.backup.shift();

		if(backup) {
			if(backup["type"] == "move") {
				this.resetJoueur();
				this.nbMove--;

				this.joueur["x"] = backup["move"]["from"]["x"];
				this.joueur["y"] = backup["move"]["from"]["y"];
				
				this.getCell(this.joueur["x"], this.joueur["y"]).addClass(backup["clazz"]);
				if(this.backup[0] && this.backup[0]["type"] == "push") {
					this.undo();
				}
			} else {
				this.nbPush--;
				var cellScr = this.getCell(backup["move"]["from"]["x"], backup["move"]["from"]["y"]);
				var cellDst = this.getCell(backup["move"]["to"]["x"], backup["move"]["to"]["y"]);

				cellScr.addClass("caisse");
				cellDst.removeClass("caisse");
			}

			$(".indique .nbMove").html(this.nbMove);
			$(".indique .nbPush").html(this.nbPush);
		}
	}

	Soko.prototype.astar = function(x, y) {
		var closedList = new List();
		var openList = new SortedList();
		
		openList.insert(new Noeud(this.joueur["x"], this.joueur["y"], 0, 0, null));
		while(openList.size() != 0) {
			var u = openList.pop();
			
			if(u.x == x && u.y == y) {
				closedList.insert(u);
				return closedList.getChemin();
			}
			
			var voisins = this.getVoisins(u);
			for(var i=0;i<voisins.length;i++) {
				var v = voisins[i];
				var oi = openList.searchXY(v.attr("data-x"), v.attr("data-y"));
				var ci = closedList.searchXY(v.attr("data-x"), v.attr("data-y"));
				
				if((oi == null || oi.cout >= u.cout) && (ci == null || ci.cout >= u.cout)) {
					var n = new Noeud(v.attr("data-x"), v.attr("data-y"), u.cout + 1, u.cout + 1 + this.distance(v.attr("data-x"), v.attr("data-y"), x, y), u);
					openList.insert(n);
				}
			}
			closedList.insert(u);
		}
		
		return [];
	}

	Soko.prototype.getVoisins = function(u) {
		var voisins = [];
		var cell;

		if(this.canGo(cell = this.getCell(u.x, u.y - 1))) {
			voisins.push(cell);
		}
		
		if(this.canGo(cell = this.getCell(u.x + 1, u.y))) {
			voisins.push(cell);
		}
		
		if(this.canGo(cell = this.getCell(u.x, u.y + 1))) {
			voisins.push(cell);
		}
		
		if(this.canGo(cell = this.getCell(u.x - 1 , u.y))) {
			voisins.push(cell);
		}
		
		return voisins;
	}

	Soko.prototype.distance = function(x1, y1, x2, y2) {
		return Math.sqrt(Math.pow(Math.abs(x1 - x2), 2) + Math.pow(Math.abs(y1 - y2), 2));
	}

	Soko.prototype.anim = function(step, chemin) {
		var that = this;
		
		if(step < chemin.length) {
			if(chemin[step] == "gauche") {
				this.gauche();
			}else if(chemin[step] == "haut") {
				this.haut();
			}else if(chemin[step] == "droite") {
				this.droite();
			}else {
				this.bas();
			}

			setTimeout(function() {
				that.anim(step+1, chemin);
			}, 100);
		}
	}

	function Noeud(x, y, cout, heuristique, parent) {
		this.x = Number(x);
		this.y = Number(y);
		this.cout = Number(cout);
		this.heuristique = Number(heuristique);
		this.parent = parent;
	}

	Noeud.prototype.compare = function(other) {
		return other.heuristique - this.heuristique;
	}

	function List() {
		this.array = [];
	}
	
	List.prototype.insert = function(element) {
		this.array.push(element);
	}
	
	List.prototype.size = function() {
		return this.array.length;
	}
	
	List.prototype.searchXY = function(x, y) {
		var array = this.array;
		var index = array.length - 1;
		
		while(index >= 0) {
            if(array[index].x == x && array[index].y == y) {
				return array[index];
            }
            index--;
        }
        
        return null;
	}
	
	List.prototype.getChemin = function() {
		var result = [];
		var current = this.array[this.array.length - 1];
		var next = current.parent;
		
		while(next) {
			if(next.x == current.x) {
				if(next.y < current.y) {
					result.splice(0, 0, "bas");
				} else {
					result.splice(0, 0, "haut");
				}
			} else {
				if(next.x < current.x) {
					result.splice(0, 0, "droite");
				} else {
					result.splice(0, 0, "gauche");
				}
			}
			
			current = next;
			next = next.parent;
		}
		
		return result;
	}
	
	List.prototype.size = function() {
		return this.array.length;
	}
	
	List.prototype.log = function() {
		console.log(this.array);
	}
	
	function SortedList() {
		List.call(this);
	}
	
	SortedList.prototype.insert = function(element) {
		var array = this.array;
		var index = array.length;
		
		array.push(element);

        while(index > 0) {
            var i = index, j = --index;

            if(array[i].compare(array[j]) < 0) {
                var temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
	}
	
	SortedList.prototype.pop = function() {
		if(this.array.length != 0) {
			return this.array.pop();
		}
		
		return null;
	}
	
	SortedList.prototype.size = function() {
		return List.prototype.size.apply(this);
	}
	
	SortedList.prototype.searchXY = function(x, y) {
		return List.prototype.searchXY.apply(this, arguments);
	}
</script>

